<?php

namespace App\Security;

use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\SelfValidatingPassport;

class LoginAuthenticator extends AbstractAuthenticator
{
    
    public function supports(Request $request): ?bool
    {
        error_log('===========================> Erreur loggé ');

        return true;
    }

    public function authenticate(Request $request): Passport
    {
        /*
        $payload = json_decode(urldecode($request->getContent()), true);

        $passport = new SelfValidatingPassport(new UserBadge($request->$payload['username']), []);
        return $passport;
*/
        $payload = json_decode(urldecode($request->getContent()), true);

        $credentials = [
//        'username' => $request->request->get('username'),
            'username' => $payload['username'],
//        'password' => $request->request->get('password')
            'password' => $payload['password']
        ]; 
 
        return new SelfValidatingPassport(new UserBadge($credentials['username']));

    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
        error_log('===========================> Erreur loggé '.$token->__toString());
        var_dump($request->get('token'));
//        $response = parent::onAuthenticationSuccess($request, $token, $firewallName);

        return null;
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response
    {
        return new JsonResponse(['message' => 'Erreur d authent']);
    }

//    public function start(Request $request, AuthenticationException $authException = null): Response
//    {
//        /*
//         * If you would like this class to control what happens when an anonymous user accesses a
//         * protected page (e.g. redirect to /login), uncomment this method and make this class
//         * implement Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface.
//         *
//         * For more details, see https://symfony.com/doc/current/security/experimental_authenticators.html#configuring-the-authentication-entry-point
//         */
//    }
}
